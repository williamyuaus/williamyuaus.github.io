<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Vue - Tag - William Yu</title><link>https://williamyuaus.com/tags/vue/</link><description>Vue - Tag - William Yu</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>williamyuaus@gmail.com (William Yu)</managingEditor><webMaster>williamyuaus@gmail.com (William Yu)</webMaster><lastBuildDate>Fri, 11 Aug 2023 12:27:22 +1000</lastBuildDate><atom:link href="https://williamyuaus.com/tags/vue/" rel="self" type="application/rss+xml"/><item><title>Disabling Error Notification Toast when Generating PDF from a Vue Project</title><link>https://williamyuaus.com/2023/08/disable-the-error-notification-toast-when-generating-pdf-from-a-vue-project/</link><pubDate>Fri, 11 Aug 2023 12:27:22 +1000</pubDate><author>William Yu</author><guid>https://williamyuaus.com/2023/08/disable-the-error-notification-toast-when-generating-pdf-from-a-vue-project/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://raw.githubusercontent.com/williamyuaus/blog-img/master/img/202308111307432.png" referrerpolicy="no-referrer">
            </div>Intro When generating a PDF from a webpage using Puppeteer in a Vue project, it&rsquo;s often desirable to prevent the display of any error notification popups. This was the challenge I encountered. Specifically, in a Vue project, when a REST API call failed, a notification popup would appear on the browser screen. If a PDF version of the webpage needed to be generated, this popup would persist in the output. An example of this scenario is illustrated below: Approach My solution involved utilizing a media query.]]></description></item><item><title>Unit Testing for Vue Router Global After Hooks</title><link>https://williamyuaus.com/2022/08/unit-testing-for-vue-router-global-after-hooks/</link><pubDate>Wed, 24 Aug 2022 14:50:50 +1000</pubDate><author>William Yu</author><guid>https://williamyuaus.com/2022/08/unit-testing-for-vue-router-global-after-hooks/</guid><description>&lt;div class="featured-image">
&lt;img src="https://raw.githubusercontent.com/williamyuaus/blog-img/master/img/202208241453558.png" referrerpolicy="no-referrer">
&lt;/div>Intro It is always not easy to do the unit testing for the Vue Router. People prefer to implement end-to-end testing for this. Especially, if you have defined some Vue router global hooks, it would be more difficult to testing the execution of them.
Fortunately, we still can find a way to do the unit testing for the Vue Router Global After Hooks
Background In my project, I have implemented afterEach as global after hooks in my Vue router settings.</description></item><item><title>How to Deploy a Spring Boot and Vue Application on AWS EC2 Using Docker</title><link>https://williamyuaus.com/2021/08/how-to-deploy-a-spring-boot-and-vue-application-on-aws-ec2-using-docker/</link><pubDate>Sat, 28 Aug 2021 15:25:05 +1000</pubDate><author>William Yu</author><guid>https://williamyuaus.com/2021/08/how-to-deploy-a-spring-boot-and-vue-application-on-aws-ec2-using-docker/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://raw.githubusercontent.com/williamyuaus/blog-img/master/20210826214826.png" referrerpolicy="no-referrer">
            </div><h2 id="intro">Intro</h2>
<p>To develop a single-page application, Spring Boot and Vue can be a good choice. When you finished the development stage, it is time to deploy the app online.</p>
<p>Traditionally, you may need to write scripts to start your java service, and you need to do a lot of configuration for the Nginx server.</p>
<p>To make the process easier and more efficient, I would recommend using Docker to deploy the app. You may find it a little bit difficult to learn at the beginning, but you will benefit from the learning since Docker could help you a lot.</p>]]></description></item></channel></rss>